options
{
  static = true;
}

PARSER_BEGIN(PiaCompiller)
package compilador;

//import java.util.HashMap;
//import java.util.Map;

public class PiaCompiller
{
//  private static Map<String, String> variaveis = new HashMap<>();
  
  public static void main(String args []) throws ParseException
  {
    PiaCompiller parser = new PiaCompiller(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");
      try
      {
        PiaCompiller.main();
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        PiaCompiller.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
  // Métodos auxiliares para gerenciar variáveis
//    public static void declararVariavel(String tipo, String nome)
//    {
//        if (variaveis.containsKey(nome))
//        {
//            throw new RuntimeException("Variável '" + nome + "' já foi declarada.");
//        }
//        variaveis.put(nome, tipo);
//    }
//
//    public static void verificarVariavel(String nome)
//    {
//        if (!variaveis.containsKey(nome))
//        {
//            throw new RuntimeException("Variável '" + nome + "' não foi declarada.");
//        }
//    }
}

PARSER_END(PiaCompiller)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < INICIAPROG : "bah_piazada" >
| < ABREBLOCO : "abre_jaguara" >
| < FECHABLOCO : "fecha_jaguara" >
| < FIMINSTRUCAO: "cabo_o_fandango" >
| < TIPOINT : "torresmo" >
| < TIPOFLOAT : "cuca" >
| < TIPOBOL : "chimarrao" >
}

TOKEN : /* CONDITIONALS */
{
  < IF : "eh_memo" >
| < ABREPAR : "(" >
| < FECHAPAR : ")" >
| < OPREL : "==" | "!=" | "<" | ">" | "<=" | ">=" >
| < OPBOOL : "&&" | "||" >
}

TOKEN : /* ASSIGNMENT */
{
  < ASSIGN : "=" >
}

TOKEN : /* LOOP */
{
  < WHILE : "enquanto_guri" >
| < DO : "vai_fazeno" >
| < DOWHILE : "ate" >
}


TOKEN :
{
  < CONSTANT : (< DIGITO >)+ >
| < #DIGITO : [ "0"-"9" ] >
| < ID : ["a"-"z"](["a"-"z"] | < DIGITO >)* >
}

void main() :
{}
{
    < INICIAPROG > < ABREBLOCO > (instrucao())* < FECHABLOCO >
}

void instrucao() :
{}
{
    (declaracaoVariavel() | atribuicao() | expressao()) < FIMINSTRUCAO > | blocoInstrucoes() | estruturaCondicional() | estruturaRepeticao()
}

void blocoInstrucoes() :
{}
{
    < ABREBLOCO > (instrucao())* < FECHABLOCO >
}

void declaracaoVariavel() :
{
//	Token tipo = null;
//	Token id = null;
}
{
    declaraTipo() < ID > ( < ASSIGN > expressao() )?
//    {
//		PiaCompiller.declararVariavel(tipo.image, id.image); // Armazene o nome e o tipo da variável
//    }
}

void declaraTipo() :
{
	//Token tipo = null;
}
{
    ( < TIPOINT > | < TIPOFLOAT > | < TIPOBOL > )
}

void atribuicao() :
{}
{
  < ID > < ASSIGN > expressao()
//  {
//  	PiaCompiller.verificarVariavel(token.image); // Verifique se a variável foi declarada
//  }
}

void estruturaCondicional() :
{}
{
    < IF > < ABREPAR > expressao() < FECHAPAR > blocoInstrucoes()
}

void estruturaRepeticao() :
{}
{
	(estruturaWhile() | estruturaDoWhile())
}

void estruturaWhile() :
{}
{
	< WHILE > <ABREPAR > expressao() < FECHAPAR > blocoInstrucoes()
}

void estruturaDoWhile() :
{}
{
	< DO > blocoInstrucoes() < DOWHILE > < ABREPAR > expressao() < FECHAPAR >
}

void expressao() :
{}
{
    termo() ( < OPBOOL > termo() )*
}

void termo() :
{}
{
    fator() ( < OPREL > fator() )?
}

void fator() :
{}
{
    < ID > | < CONSTANT >
}
