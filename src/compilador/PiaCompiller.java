/* PiaCompiller.java */
/* Generated By:JavaCC: Do not edit this line. PiaCompiller.java */
package compilador;

public class PiaCompiller implements PiaCompillerConstants {
  public static void main(String args []) throws ParseException
  {
    PiaCompiller parser = new PiaCompiller(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \"bah_piazada abre_jaguara torresmo x cabo_o_fandango fecha_jaguara\" :");
      try
      {
        parser.main();
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        parser.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public void main() throws ParseException {
    jj_consume_token(INICIAPROG);
    jj_consume_token(ABREBLOCO);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABREBLOCO:
      case TIPOINT:
      case TIPOFLOAT:
      case TIPOBOL:
      case IF:
      case ABREPAR:
      case WHILE:
      case DO:
      case CONSTANT:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      instrucao();
    }
    jj_consume_token(FECHABLOCO);
}

  static final public void instrucao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TIPOINT:
    case TIPOFLOAT:
    case TIPOBOL:
    case ABREPAR:
    case CONSTANT:
    case ID:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIPOINT:
      case TIPOFLOAT:
      case TIPOBOL:{
        declaracaoVariavel();
        break;
        }
      case ID:{
        atribuicao();
        break;
        }
      case ABREPAR:
      case CONSTANT:{
        expressao();
        jj_consume_token(FIMINSTRUCAO);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case ABREBLOCO:{
      blocoInstrucoes();
      break;
      }
    case IF:{
      estruturaCondicional();
      break;
      }
    case WHILE:
    case DO:{
      estruturaRepeticao();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void blocoInstrucoes() throws ParseException {
    jj_consume_token(ABREBLOCO);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABREBLOCO:
      case TIPOINT:
      case TIPOFLOAT:
      case TIPOBOL:
      case IF:
      case ABREPAR:
      case WHILE:
      case DO:
      case CONSTANT:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      instrucao();
    }
    jj_consume_token(FECHABLOCO);
}

  static final public void declaracaoVariavel() throws ParseException {
    declaraTipo();
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      expressao();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(FIMINSTRUCAO);
}

  static final public void declaraTipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TIPOINT:{
      jj_consume_token(TIPOINT);
      break;
      }
    case TIPOFLOAT:{
      jj_consume_token(TIPOFLOAT);
      break;
      }
    case TIPOBOL:{
      jj_consume_token(TIPOBOL);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void atribuicao() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(ASSIGN);
    expressao();
    jj_consume_token(FIMINSTRUCAO);
}

  static final public void estruturaCondicional() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(ABREPAR);
    expressao();
    jj_consume_token(FECHAPAR);
    blocoInstrucoes();
}

  static final public void estruturaRepeticao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHILE:{
      estruturaWhile();
      break;
      }
    case DO:{
      estruturaDoWhile();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void estruturaWhile() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(ABREPAR);
    expressao();
    jj_consume_token(FECHAPAR);
    blocoInstrucoes();
}

  static final public void estruturaDoWhile() throws ParseException {
    jj_consume_token(DO);
    blocoInstrucoes();
    jj_consume_token(DOWHILE);
    jj_consume_token(ABREPAR);
    expressao();
    jj_consume_token(FECHAPAR);
}

  static final public void expressao() throws ParseException {
    expressaoRelacional();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPBOOL:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(OPBOOL);
      expressaoRelacional();
    }
}

  static final public void expressaoRelacional() throws ParseException {
    expressaoAritmetica();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPREL:{
      jj_consume_token(OPREL);
      expressaoAritmetica();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
}

  static final public void expressaoAritmetica() throws ParseException {
    termo();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPAD:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(OPAD);
      termo();
    }
}

  static final public void termo() throws ParseException {
    fator();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPMULT:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      jj_consume_token(OPMULT);
      fator();
    }
}

  static final public void fator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      jj_consume_token(ID);
      break;
      }
    case CONSTANT:{
      jj_consume_token(CONSTANT);
      break;
      }
    case ABREPAR:{
      jj_consume_token(ABREPAR);
      expressao();
      jj_consume_token(FECHAPAR);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public PiaCompillerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x28c3e40,0x2802e00,0x28c3e40,0x28c3e40,0x20000,0xe00,0xc0000,0x10000,0x8000,0x200000,0x400000,0x2802000,};
	}

  /** Constructor with InputStream. */
  public PiaCompiller(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PiaCompiller(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new PiaCompillerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PiaCompiller(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new PiaCompillerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new PiaCompillerTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PiaCompiller(PiaCompillerTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PiaCompillerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[26];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 12; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 26; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
